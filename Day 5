#ARRAYS
#1-D ARRAY
Collection of similar type of data in a continuous allocation. In C and C++ we have pointers so definately elements will be stored in continuous format.
in Java, we don't have pointers then there is a chance of elements might stored in random places.
Syntax :- datatype[] = array name

PRIMITIVE AND NON PRIMITIVE:
Primitive datatypes can't be splited or divided. Eg:- int,float,char
Non-primitive datatypes can be divided. Eg:- string and all the objects that were created by users(class node = int data, node next)


All the objects will be stored in int memory. All the references will be in stack memory. 

Stack memory having less space compared to the int memory.

        int a =10;
        int b = 12;
        int c = 14;
        int d = 19 ;

All the variables are stored in same datatype. Instead of creating multiple variables, create an array to store those values.
If we create multiple variables to get the data ,simply we can print the data. When it comes to array, if we want to print the data, we can print using index values and by default, index values will start from 0.
int[] arr = {1,2,3,4,5} - Declaration and initialization happen in same line.
class Main {
    public static void main(String[] args) {
       int[] arr = {1,2,3,4,5};
       for(int i = 0; i < arr.length; i++){
           System.out.println(arr[i]);
       }
    }
}
To get the length of the array, we have a method called arr.length
In Strings, it is string_name.length()


# CAMEL CASE AND SNAKE CASE

CAMEL CASE :- arrayName.length
SNAKE CASE :- arr.length

In java, it is preferred to use camel case to production level code. Production level code is written in standard code.
Eg:- void AdditionOfTwoNumbers(){
     }

#TYPE OF PRINTING FORMATS FOR ARRAY VALUES

We can print the array values using the simple for loop.

for(int i = 0; i < arr.length; i++){
           System.out.println(arr[i]);
       }

We can print array values using for-each loop.

for(int i : arr){
           System.out.println(i + " ");
       }

In for-each loop, we don't need index values. 


toString is an in-built method to print array.

int[] arr = {1,2,3,4,5};
System.out.println(Arrays.toString(arr));

toString can accept only one argument and that too array.

#DECLARING THE SIZE OF ARRAY AND INITIALIZING THE VALUE LATER

Array having fixed sixe. if we declare an array size, it can't be changed.
int[] arr = new int[5];

Before = array reference was created. With the help of new keyword actual object will be created in the int memory for the particular data type and size

If the array type is int , the default value will be 0. If it is a String, the default value will be NULL and NULL is a literal.

Whenever you are trying to assign or trying to get nth value of array, u will get exception called array  










 
