#  LOWER BOUND AND UPPER BOUND


public class BoundsFinder {

    public static int lowerBound(int[] arr, int target) {
        int low = 0, high = arr.length;
        while (low < high) {
            int mid = (low + high) / 2;
            if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static int upperBound(int[] arr, int target) {
        int low = 0, high = arr.length;
        while (low < high) {
            int mid = (low + high) / 2;
            if (arr[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    public static void main(String[] args) {
        int[] arr = {1, 3, 5, 6, 6, 7, 7, 7, 9};
        int t = 7;

        int lower = lowerBound(arr, t);
        int upper = upperBound(arr, t);

        System.out.println("Lower Bound of " + t + " is at index: " + lower);
        System.out.println("Upper Bound of " + t + " is at index: " + upper);
    }
}

# FIND MINIMUM ELEMENT IN AN ARRAY USING BINARY SEARCH

public class Main{
    public static int MinimumInArray(int[] arr) {
        int l = 0;
        int r = arr.length - 1;
        if (arr[l] <= arr[r]) {
            return arr[l];
        }

        while (l < r) {
            int mid = (l + r) / 2;

            if (arr[mid] > arr[r]) {
                
                l = mid + 1;
            } else {
                
                r = mid;
            }
        }        
        return arr[l];
    }
    public static void main(String[] args) {
        int[] arr = {4, 5, 6, 7, 0, 1, 2};
        System.out.println("Minimum element is: " + MinimumInArray(arr));
    }
}


#PREFIXSUM

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]





