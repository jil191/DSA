#STRINGS
Strings are classes and arrays are objects.The sequence of characters is called Strings.
Strings are immutable.
All the array objects will be created in int memory but strings are created inside heap memory
Once a string got created, it will be created fixed. It means we cant modify the string.

String a = "Hello";
String b = "Hello";  
System.out.print(a==b);
it will return true as it is stored in a pool 

String a = new String("Hello");
String b = new String("Hello");
System.out.print(a==b);
It will return false as the memory is stored for two different objects here. 

This == is used to compare address locations.

System.out.print(a.equals(b));
Equals is used to compare the data.

public class ArraySwaping{
    public static void main(String[] args) {
    int[] arr = {1,2,4,3,5};
    int i  = 0;
    int j = arr.length - 1;
    while (i < j) {
        int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
    }
    for (int num : arr) {
            System.out.print(num + " ");
        }
     }
    
}

To get array length, we have to array.length 
but to get string length, we use array.length method 

#COMMONLY USED STRING METHODS
- length() - Returns the length of the string.
- charAt(int index) - Returns the character at the specified index.
- substring(int beginIndex, int endIndex) - Extracts a portion of the string.
- contains(CharSequence s) - Checks if the string contains the specified sequence.
- startsWith(String prefix) / endsWith(String suffix) - Checks if the string starts/ends with a given substring.
- toUpperCase() / toLowerCase() - Converts the string to uppercase or lowercase.
- trim() - Removes leading and trailing spaces.
- replace(String old, String new) - Replaces occurrences of a substring.
- split(String regex) - Splits the string into an array based on a regex.
- equals(String anotherString) / equalsIgnoreCase(String anotherString) - Compares two strings.

#SUBSETS
For a GIVEN ARRAY, we have to print possible arrays. it should be in a sequence but continuous, that's called subsets
and in an array, if we have n number of elements we will get 2^n subsets.


#Backtracking
It is an example of recursion
in recursion, we have only 2 possibilities; either if or else and in backtracking, we have multiple possibilities 
in most of the problems, whenever we reach base case, we have to print all the base case elements.
Remove last element in every recursive call then the backtracking will complete
