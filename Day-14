#LINEAR SEARCH

For the elements in an array in a linear way, if your array length is shorter use linear search.
Time complexity :- O(n)
[5,8,11,14,16] , target = 14. Find the index
for(o to n-1){
  if(arr[i] == target){
    return i;
    }
    return -1;
}

# BINARY SEARCH
To reduce time complexity, while searching we have to use binary search.
To perform binary search, the array should be sorted.

Time Complexity - O(logn)
Step 1: Initialize l pointer at 0 and r pointer at n -1.
Step 2: Run the loop from l to r.
Step 3: Break the loop when l and r crosses each other.
Step 4: Find the middle value; M = (l+r)/2
Step 5: Compare middle element to the target.


 while(l<r){
            if(arr[mid] == target){
                return mid;
            }
            if(arr[mid] < target){
                l = m+1;
            }
            else{
                r = m+1;
            }
        }

#CODE :

public class BinarySearch {
    
    public static int binarySearch(int[] arr, int target) {
        int l = 0;
        int r = arr.length - 1;

        while (l <= r) {
            int mid = (l + r) / 2;  

            if (arr[mid] == target) {
                return mid; 
            } else if (arr[mid] < target) {
                l = mid + 1;  
            } else {
                r = mid - 1;  
            }
        }

        return -1;  
    }

    public static void main(String[] args) {
        int[] numbers = {2, 4, 6, 8, 10, 12, 14};  
        int target = 10;

        int result = binarySearch(numbers, target);

        if (result == -1) {
            System.out.println("Not found.");
        } else {
            System.out.println("Index: " + result);
        }
    }
}


R
Step 1: Initialize l and r at o and n - 1 resp.
Step 2: run the loop from l to r
Step 3: we have to find which half is sorted. 
Step 4: For that, if arr[mid] < arr[l], it means right half is sorted &  if target lies in between arr[l] and arr[mid], it means element is present in left half.
        left pointer will remain same and right pointer will come to mid - 1. Else element present in right half, right pointer will remain same and left point will move to mid + 1.
Step 5: If arr[mid] > arr[l], it means left half is sorted and if target lies in between arr[r] and arr[mid], it means element lies in right half.
        right pointer will remain same and left pointer will move to mid + 1. Else element will lie in left half and left pointer will remain same and right pointer will move to mid - 1.



